{"version":3,"sources":["components/message/Message.module.css","components/chat-list-item/ChatListItem.module.css","components/chat-window/ChatWindow.module.css","components/no-selected-chatroom/NoSelectedChatroom.module.css","components/create-chat/CreateChat.module.css","components/conversations/Conversations.module.css","components/info-bar/InfoBar.module.css","components/sidebar/Sidebar.module.css","Main.module.css","types/Interface.ts","redux/AppSlice.ts","utils/mockGenerators.ts","components/message/Message.tsx","components/conversations/Conversations.tsx","components/info-bar/InfoBar.tsx","components/write-message-area/WriteMessageArea.tsx","components/no-selected-chatroom/NoSelectedChatroom.tsx","components/chat-window/ChatWindow.tsx","components/chat-list-item/ChatListItem.tsx","components/chat-list/ChatList.tsx","components/create-chat/CreateChat.tsx","utils/chatroomGenerators.ts","components/sidebar/Sidebar.tsx","Main.tsx","redux/store.ts","serviceWorker.ts","index.tsx"],"names":["module","exports","ChatroomType","initialState","users","displayName","userName","ownerUser","activeChatroomId","chatrooms","startChatOpen","appSlice","createSlice","name","reducers","changeSelectecChatroomId","state","action","payload","addChatroom","addMessage","currentChatroom","find","chatroom","id","chatroomId","messages","message","messagesToEcho","forEach","user","push","sentTime","moment","toISOString","text","sender","generateMockMessages","participants","changeDraftMessage","draftMessage","clearDraftMessage","setStartChatOpen","actions","selectActiveChatroomId","app","selectUsers","selectChatrooms","selectOwner","selectStartChatOpen","selectActiveChatroom","selectedChatroomId","Message","props","isGroup","isOwner","className","styles","owner","external","messageContainer","messageInfo","format","Conversations","activeChatroom","useSelector","container","map","key","type","group","InfoBar","chatName","groupName","WriteMessageArea","dispatch","useDispatch","sendMessage","trim","newMessage","InputGroup","FormControl","placeholder","aria-describedby","value","onChange","event","target","onKeyUp","preventDefault","keyCode","Button","variant","onClick","NoSelectedChatroom","infoText","ChatWindow","inactiveChat","inactiveChatOverlay","ChatListItem","lastMessage","isSelected","chatListItemContainer","selectedChat","nameTime","ChatList","chatItems","length","isValidGroup","CreateChat","useState","selectedUser","setSelectedUser","selectedUsers","setSelectedUsers","isGroupCreateMode","setIsGroupCreateMode","setGroupName","singleUserSelect","isSearchable","isClearable","hideSelectedOptions","options","label","multiUserSelect","isMulti","actionButtonsContainer","disabled","groupChatroom","mappedUsers","selectUser","Math","random","generateGroupChatroom","existingChatroom","participantUsername","individual","participant","getIndividualChatroomIdByParticipantUsername","individualChatroom","selectedUsername","userToAdd","generateIndividualChatroom","Form","Check","Text","groupCreateLabel","checked","Sidebar","Main","store","configureStore","reducer","devTools","trace","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.bcf0f7a4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"owner\":\"Message_owner__3aIXn\",\"external\":\"Message_external__R5t6E\",\"messageContainer\":\"Message_messageContainer__22m0K\",\"messageInfo\":\"Message_messageInfo__1YKGt\",\"userName\":\"Message_userName__2wrmo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chatListItemContainer\":\"ChatListItem_chatListItemContainer__1f3zn\",\"nameTime\":\"ChatListItem_nameTime__OZRn1\",\"lastMessage\":\"ChatListItem_lastMessage__2VXiS\",\"selectedChat\":\"ChatListItem_selectedChat__C9NhC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ChatWindow_container__2jOJR\",\"inactiveChat\":\"ChatWindow_inactiveChat__mrrro\",\"inactiveChatOverlay\":\"ChatWindow_inactiveChatOverlay__3Mcmi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"NoSelectedChatroom_container__1kc0X\",\"infoText\":\"NoSelectedChatroom_infoText__2nwPz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"actionButtonsContainer\":\"CreateChat_actionButtonsContainer__GtUVB\",\"groupCreateLabel\":\"CreateChat_groupCreateLabel__1t69o\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Conversations_container__11Oy7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"InfoBar_container__3Ro-u\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Sidebar_container__yw-NV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Main_container__353I5\"};","export enum ChatroomType {\r\n    group = 'group',\r\n    individual = 'individual',\r\n}\r\n\r\nexport interface User {\r\n    displayName: string;\r\n    userName: string;\r\n}\r\n\r\nexport interface Message {\r\n    sentTime: string;\r\n    text: string;\r\n    sender: User;\r\n}\r\n\r\nexport interface Chatroom {\r\n    id: string;\r\n    type: ChatroomType;\r\n    groupName?: string;\r\n    participants: User[];\r\n    messages: Message[];\r\n    draftMessage: string;\r\n}","import {createSlice, PayloadAction} from '@reduxjs/toolkit';\r\nimport {RootState} from './store';\r\nimport {Chatroom, ChatroomType, Message, User} from '../types/Interface';\r\nimport {generateMockMessages} from '../utils/mockGenerators';\r\n\r\nconst owner = {displayName: \"Sandor Clegane\", userName: \"burnt.flesh\"};\r\n\r\n// Interfaces\r\nexport interface ActionAddChatMessage {\r\n    chatroomId: string;\r\n    message: Message;\r\n}\r\n\r\nexport interface ActionChangeDraftMessage {\r\n    chatroomId: string;\r\n    message: string;\r\n}\r\n\r\nexport interface FormState {\r\n    users: User[];\r\n    activeChatroomId: string | null;\r\n    chatrooms: Chatroom[];\r\n    ownerUser: User;\r\n    startChatOpen: boolean;\r\n}\r\n\r\n// Initial state\r\nexport const initialState: FormState = {\r\n    users: [\r\n        {displayName: \"Jon Snow\", userName: \"j.snow\"},\r\n        {displayName: \"Arya Stark\", userName: \"arya.needle\"},\r\n        {displayName: \"Jaimie Lannister\", userName: \"j.kingslayer\"},\r\n        {displayName: \"Rob Stark\", userName: \"dies.at.wedding\"},\r\n        {displayName: \"The Mountain\", userName: \"explosive.head\"},\r\n    ],\r\n    ownerUser: owner,\r\n    activeChatroomId: null,\r\n    chatrooms: [],\r\n    startChatOpen: false,\r\n}\r\n\r\n// Reducer\r\nexport const appSlice = createSlice({\r\n    name: 'chatrooms',\r\n    initialState,\r\n    reducers: {\r\n        // Use the PayloadAction type to declare the contents of `action.payload`\r\n        changeSelectecChatroomId: (state, action: PayloadAction<string>) => {\r\n            state.activeChatroomId = action.payload;\r\n        },\r\n        addChatroom: (state, action: PayloadAction<Chatroom>) => {\r\n            state.chatrooms = [...state.chatrooms, action.payload];\r\n        },\r\n        addMessage: (state, action: PayloadAction<ActionAddChatMessage>) => {\r\n            const currentChatroom = state.chatrooms.find(chatroom => chatroom.id === action.payload.chatroomId);\r\n            if (currentChatroom) {\r\n                currentChatroom.messages = [...currentChatroom.messages, action.payload.message, ...generateMockMessages(currentChatroom.participants, action.payload.message.text)];\r\n            }\r\n        },\r\n        changeDraftMessage: (state, action: PayloadAction<ActionChangeDraftMessage>) => {\r\n            const currentChatroom = state.chatrooms.find(chatroom => chatroom.id === action.payload.chatroomId);\r\n            if (currentChatroom) {\r\n                currentChatroom.draftMessage = action.payload.message;\r\n            }\r\n        },\r\n        clearDraftMessage: (state, action: PayloadAction<string>) => {\r\n            const currentChatroom = state.chatrooms.find(chatroom => chatroom.id === action.payload);\r\n            if (currentChatroom) {\r\n                currentChatroom.draftMessage = '';\r\n            }\r\n        },\r\n        setStartChatOpen: (state, action: PayloadAction<boolean>) => {\r\n            state.startChatOpen = action.payload;\r\n        },\r\n    },\r\n});\r\n\r\n// Actions\r\nexport const {\r\n    changeSelectecChatroomId,\r\n    addChatroom,\r\n    addMessage,\r\n    changeDraftMessage,\r\n    clearDraftMessage,\r\n    setStartChatOpen\r\n} = appSlice.actions;\r\n\r\n// Selectors\r\nexport const selectActiveChatroomId = (state: RootState) => state.app.activeChatroomId;\r\nexport const selectUsers = (state: RootState) => state.app.users;\r\nexport const selectChatrooms = (state: RootState) => state.app.chatrooms;\r\nexport const selectOwner = (state: RootState) => state.app.ownerUser;\r\nexport const selectStartChatOpen = (state: RootState) => state.app.startChatOpen;\r\n\r\nexport const selectChatroomTitleById = (chatroomId: string | null) => {\r\n    return (state: RootState) => {\r\n        if (chatroomId === null) {\r\n            return '';\r\n        }\r\n        const chatroom = state.app.chatrooms.find(chatroom => chatroom.id === chatroomId);\r\n        if (chatroom) {\r\n            return chatroom.type === ChatroomType.group ? chatroom.groupName : chatroom.participants[0].displayName\r\n        } else {\r\n            return '';\r\n        }\r\n    };\r\n}\r\n\r\nexport const selectActiveChatroom = (state: RootState) => {\r\n    const selectedChatroomId = state.app.activeChatroomId;\r\n\r\n    return state.app.chatrooms.find(chatroom => chatroom.id === selectedChatroomId);\r\n};\r\n\r\n\r\n\r\n","import moment from \"moment\";\r\nimport {Message, User} from \"../types/Interface\";\r\n\r\nexport const generateMockMessages = (users: User[], messagesToEcho: string) => {\r\n    const messages: Message[] = [];\r\n    users.forEach(user => {\r\n        messages.push({\r\n            sentTime: moment().toISOString(),\r\n            text: `${messagesToEcho} 🙂`,\r\n            sender: user\r\n        });\r\n    });\r\n\r\n    return messages;\r\n}\r\n","import moment from 'moment';\r\nimport React from 'react'\r\nimport {User} from '../../types/Interface';\r\nimport styles from \"./Message.module.css\";\r\n\r\nexport interface MessageProps {\r\n    ownerUser: User;\r\n    user: User;\r\n    sentTime: string;\r\n    message: string;\r\n    isGroup: boolean;\r\n}\r\n\r\nconst Message = (props: MessageProps) => {\r\n    const {ownerUser, sentTime, message, user, isGroup} = props;\r\n    const isOwner = ownerUser.userName === user.userName;\r\n\r\n    return <div className={isOwner ? styles.owner : styles.external}>\r\n        <div className={styles.messageContainer}>{message}</div>\r\n        <div className={styles.messageInfo}>\r\n            {!isOwner && isGroup ? <span className={styles.userName}>{user.displayName} </span> : null}\r\n            <span>{moment(sentTime).format(\"MMM d, hh:mm\")}</span>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default Message;","import React from 'react'\r\nimport {useSelector} from 'react-redux';\r\nimport {selectActiveChatroom, selectOwner} from '../../redux/AppSlice';\r\nimport {ChatroomType} from '../../types/Interface';\r\nimport styles from './Conversations.module.css';\r\nimport Message from '../message/Message';\r\n\r\n\r\nexport default function Conversations() {\r\n    const activeChatroom = useSelector(selectActiveChatroom);\r\n    const owner = useSelector(selectOwner);\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            {activeChatroom === null ?\r\n                <div>Select or start a conversation first</div> : activeChatroom?.messages.map(message => <Message\r\n                    key={`${message.sender.userName}${message.sentTime}`}\r\n                    isGroup={activeChatroom.type === ChatroomType.group} sentTime={message.sentTime}\r\n                    message={message.text} user={message.sender} ownerUser={owner}/>)}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {useSelector} from 'react-redux';\r\nimport {selectActiveChatroom, selectActiveChatroomId, selectChatroomTitleById} from '../../redux/AppSlice';\r\nimport {ChatroomType} from '../../types/Interface';\r\nimport styles from './InfoBar.module.css';\r\n\r\nexport default function InfoBar() {\r\n    const activeChatroomId = useSelector(selectActiveChatroomId);\r\n    const chatName = useSelector(selectChatroomTitleById(activeChatroomId));\r\n\r\n    const activeChatroom = useSelector(selectActiveChatroom);\r\n    return (\r\n        <div className={styles.container}>\r\n            {chatName}{activeChatroom?.type === ChatroomType.group ? \" (group) \" : null}\r\n        </div>\r\n    )\r\n}\r\n","import moment from \"moment\";\r\nimport React from \"react\";\r\nimport {InputGroup, FormControl, Button} from \"react-bootstrap\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    changeDraftMessage,\r\n    selectActiveChatroom,\r\n    selectActiveChatroomId,\r\n    selectOwner,\r\n    addMessage,\r\n    clearDraftMessage\r\n} from \"../../redux/AppSlice\";\r\nimport {Message} from \"../../types/Interface\";\r\n\r\nexport default function WriteMessageArea() {\r\n    const dispatch = useDispatch();\r\n    const activeChatroomId = useSelector(selectActiveChatroomId);\r\n    const owner = useSelector(selectOwner);\r\n    const activeChatroom = useSelector(selectActiveChatroom);\r\n\r\n    const sendMessage = () => {\r\n        const text = activeChatroom ? activeChatroom.draftMessage : \"\";\r\n        if (text.trim()) {\r\n            const newMessage: Message = {\r\n                text: text,\r\n                sentTime: moment().toISOString(),\r\n                sender: owner,\r\n            };\r\n\r\n            dispatch(addMessage({chatroomId: activeChatroomId || \"\", message: newMessage}));\r\n            dispatch(clearDraftMessage(activeChatroomId || \"\"));\r\n        }\r\n\r\n\r\n    };\r\n\r\n    const inputKeyUpHandler = (event: any) => {\r\n        event.preventDefault();\r\n        if (event.keyCode === 13) {\r\n            sendMessage();\r\n        }\r\n    }\r\n\r\n    const changeMessage = (event: any) => {\r\n        const value = event.target.value;\r\n\r\n        dispatch(changeDraftMessage({chatroomId: activeChatroomId || \"\", message: value}));\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <InputGroup>\r\n                <FormControl placeholder=\"Type a message\" aria-describedby=\"basic-addon2\"\r\n                             value={activeChatroom ? activeChatroom.draftMessage : \"\"} onChange={changeMessage}\r\n                             onKeyUp={inputKeyUpHandler}/>\r\n                {activeChatroom && activeChatroom.draftMessage !== \"\" ? (\r\n                    <Button variant=\"light\" onClick={sendMessage}>\r\n                        Send\r\n                    </Button>\r\n                ) : null}\r\n            </InputGroup>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport styles from './NoSelectedChatroom.module.css';\r\n\r\nexport default function NoSelectedChatroom() {\r\n    return (\r\n        <div className={styles.container}>\r\n            <span className={styles.infoText}>No active chats</span>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {useSelector} from 'react-redux';\r\nimport {selectActiveChatroomId, selectStartChatOpen} from '../../redux/AppSlice';\r\nimport Conversations from '../conversations/Conversations';\r\nimport InfoBar from '../info-bar/InfoBar';\r\nimport WriteMessageArea from '../write-message-area/WriteMessageArea';\r\nimport styles from './ChatWindow.module.css';\r\nimport NoSelectedChatroom from '../no-selected-chatroom/NoSelectedChatroom';\r\n\r\nexport default function ChatWindow() {\r\n    const selectedChatroomId = useSelector(selectActiveChatroomId);\r\n    const startChatOpen = useSelector(selectStartChatOpen);\r\n    return (\r\n        <div className={`${styles.container}${startChatOpen && selectedChatroomId ? ` ${styles.inactiveChat}` : ''}`}>\r\n            {selectedChatroomId !== null ? (\r\n                <><InfoBar/>\r\n                    <Conversations/>\r\n                    <WriteMessageArea/></>\r\n            ) : <NoSelectedChatroom/>}\r\n            {startChatOpen && selectedChatroomId !== null ? <div className={styles.inactiveChatOverlay}></div> : null}\r\n        </div>\r\n    )\r\n}\r\n","import moment from 'moment';\r\nimport React from 'react';\r\nimport {Message} from '../../types/Interface';\r\nimport styles from './ChatListItem.module.css';\r\n\r\nexport interface ChatListItemProps {\r\n    chatName: string;\r\n    lastMessage?: Message;\r\n    isSelected: boolean;\r\n    onClick: () => void;\r\n}\r\n\r\nexport default function ChatListItem(props: ChatListItemProps) {\r\n    const {chatName, lastMessage, isSelected, onClick} = props;\r\n    return (\r\n        <div onClick={onClick}\r\n             className={`${styles.chatListItemContainer}${isSelected ? ` ${styles.selectedChat}` : ''}`}>\r\n            <div className={styles.nameTime}>\r\n                <div>{chatName}</div>\r\n                {lastMessage ? <div>{moment(lastMessage.sentTime).format(\"HH:MM\")}</div> : null}\r\n            </div>\r\n\r\n            {lastMessage ? <div className={styles.lastMessage}>{lastMessage.text}</div> : null}\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {changeSelectecChatroomId, selectActiveChatroomId, selectChatrooms} from '../../redux/AppSlice';\r\nimport {Chatroom, ChatroomType} from '../../types/Interface';\r\nimport ChatListItem from '../chat-list-item/ChatListItem';\r\n\r\nexport default function ChatList() {\r\n    const chatrooms = useSelector(selectChatrooms);\r\n    const selectedChatroomId = useSelector(selectActiveChatroomId);\r\n    const dispatch = useDispatch();\r\n\r\n    const selectChatroom = (id: string) => {\r\n        dispatch(changeSelectecChatroomId(id));\r\n    }\r\n\r\n    const chatItems = chatrooms.map((chatroom: Chatroom) => {\r\n        const chatName = chatroom.type === ChatroomType.group ? chatroom.groupName : chatroom.participants[0].displayName\r\n        return <ChatListItem key={chatroom.id} isSelected={selectedChatroomId === chatroom.id}\r\n                             lastMessage={chatroom.messages[chatroom.messages.length - 1]} chatName={chatName || ''}\r\n                             onClick={() => selectChatroom(chatroom.id)}/>;\r\n    })\r\n    return (\r\n        <div>{chatItems}</div>\r\n    )\r\n}\r\n","import React, {useState} from \"react\";\r\nimport styles from \"./CreateChat.module.css\";\r\nimport Select from \"react-select\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    addChatroom,\r\n    changeSelectecChatroomId,\r\n    selectChatrooms,\r\n    selectUsers,\r\n    setStartChatOpen\r\n} from \"../../redux/AppSlice\";\r\nimport {Chatroom, ChatroomType, User} from \"../../types/Interface\";\r\nimport {Button, Form, FormControl, InputGroup} from \"react-bootstrap\";\r\nimport {generateGroupChatroom, generateIndividualChatroom} from \"../../utils/chatroomGenerators\";\r\n\r\n\r\nconst isValidGroup = (participants: User[], groupName: string): boolean => {\r\n    return participants.length > 1 && groupName.trim() !== '';\r\n}\r\n\r\nconst getIndividualChatroomIdByParticipantUsername = (chatrooms: Chatroom[], participantUsername: string) => {\r\n    return chatrooms.find(chatroom => {\r\n        return chatroom.type === ChatroomType.individual && chatroom.participants.find(participant => participant.userName === participantUsername);\r\n    })\r\n}\r\n\r\nexport default function CreateChat() {\r\n    const users = useSelector(selectUsers);\r\n    const [selectedUser, setSelectedUser] = useState<string | null>(null);\r\n    const [selectedUsers, setSelectedUsers] = useState<any>([]);\r\n    const [isGroupCreateMode, setIsGroupCreateMode] = useState(false);\r\n    const [groupName, setGroupName] = useState(\"\");\r\n    const dispatch = useDispatch();\r\n    const chatrooms = useSelector(selectChatrooms);\r\n\r\n\r\n    const returnHandler = () => {\r\n        dispatch(setStartChatOpen(false));\r\n    }\r\n\r\n\r\n    const createChatroom = () => {\r\n        let activeChatroomId = '';\r\n\r\n\r\n        if (isGroupCreateMode && groupName && selectedUsers.length > 0) {\r\n            const groupChatroom = generateGroupChatroom(selectedUsers, groupName);\r\n            activeChatroomId = groupChatroom.id;\r\n            dispatch(addChatroom(groupChatroom));\r\n        }\r\n\r\n        if (!isGroupCreateMode && selectedUser) {\r\n            const existingChatroom = getIndividualChatroomIdByParticipantUsername(chatrooms, selectedUser);\r\n            if (existingChatroom) {\r\n                activeChatroomId = existingChatroom.id\r\n            } else {\r\n                const individualChatroom = generateIndividualChatroom(users, selectedUser);\r\n                activeChatroomId = individualChatroom.id\r\n                dispatch(addChatroom(individualChatroom));\r\n            }\r\n\r\n        }\r\n\r\n        dispatch(changeSelectecChatroomId(activeChatroomId))\r\n        dispatch(setStartChatOpen(false));\r\n    };\r\n\r\n    const toggleGroupCreateMode = () => {\r\n        setIsGroupCreateMode(!isGroupCreateMode);\r\n    };\r\n\r\n    const changeGroupName = (event: any) => {\r\n        const value = event.target.value;\r\n\r\n        setGroupName(value);\r\n    };\r\n\r\n    const singleUserSelect = (\r\n        <Select\r\n            isSearchable\r\n            isClearable\r\n            placeholder=\"Chat participant...\"\r\n            name=\"user-search-single\"\r\n            hideSelectedOptions\r\n            onChange={(event) => setSelectedUser(event ? event.value : null)}\r\n            options={users.map((user) => ({label: user.displayName, value: user.userName}))}\r\n        />\r\n    );\r\n\r\n    const multiUserSelect = (\r\n        <Select\r\n            hideSelectedOptions\r\n            isSearchable\r\n            isClearable\r\n            placeholder=\"Chat participants...\"\r\n            name=\"user-search-multiple\"\r\n            isMulti\r\n            onChange={(event) => {\r\n                return setSelectedUsers(event);\r\n            }}\r\n            options={users.map((user) => ({label: user.displayName, value: user.userName}))}\r\n        />\r\n    );\r\n\r\n    return (\r\n        <div>\r\n            <div className={styles.actionButtonsContainer}>\r\n                <Button variant=\"secondary\" onClick={returnHandler}>\r\n                    {'< Back'}\r\n                </Button>\r\n                <Button disabled={isGroupCreateMode ? !isValidGroup(selectedUsers, groupName) : selectedUser === null}\r\n                        variant=\"light\" onClick={createChatroom}>\r\n                    Create\r\n                </Button>\r\n\r\n            </div>\r\n            {isGroupCreateMode ? multiUserSelect : singleUserSelect}\r\n\r\n            {isGroupCreateMode ? <InputGroup>\r\n                <FormControl placeholder=\"Group name\" aria-describedby=\"basic-addon2\" value={groupName}\r\n                             onChange={changeGroupName}/>\r\n            </InputGroup> : null}\r\n\r\n\r\n            <Form.Check\r\n                type=\"switch\"\r\n                id=\"custom-switch\"\r\n                label={<Form.Text className={styles.groupCreateLabel}>\r\n                    Group\r\n                </Form.Text>}\r\n                checked={isGroupCreateMode}\r\n                onChange={toggleGroupCreateMode}\r\n            />\r\n\r\n        </div>\r\n    );\r\n}\r\n","import {Chatroom, ChatroomType, User} from \"../types/Interface\";\r\n\r\nexport const generateIndividualChatroom = (users: User[], selectedUsername: string): Chatroom => {\r\n\r\n    const userToAdd = users.find(user => user.userName === selectedUsername);\r\n    return {\r\n        type: ChatroomType.individual,\r\n        participants: userToAdd ? [userToAdd] : [],\r\n        id: `${Math.random()}`,\r\n        messages: [],\r\n        draftMessage: '',\r\n    }\r\n\r\n}\r\n\r\nexport const generateGroupChatroom = (selectedUsers: { label: string, value: string }[], groupName: string): Chatroom => {\r\n    const mappedUsers: User[] = selectedUsers.map(selectUser => ({\r\n        userName: selectUser.value,\r\n        displayName: selectUser.label\r\n    }));\r\n\r\n    return {\r\n        type: ChatroomType.group,\r\n        groupName: groupName,\r\n        participants: mappedUsers,\r\n        id: `${Math.random()}`,\r\n        messages: [],\r\n        draftMessage: '',\r\n    }\r\n\r\n}\r\n","import React from 'react';\r\nimport {Button} from 'react-bootstrap';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {selectStartChatOpen, setStartChatOpen} from '../../redux/AppSlice';\r\nimport ChatList from '../chat-list/ChatList';\r\nimport CreateChat from '../create-chat/CreateChat';\r\nimport styles from './Sidebar.module.css';\r\n\r\nexport default function Sidebar() {\r\n    const startChatOpen = useSelector(selectStartChatOpen);\r\n    const dispatch = useDispatch();\r\n\r\n    const openStartConversation = () => {\r\n        dispatch(setStartChatOpen(true));\r\n    }\r\n    return (\r\n        <div className={styles.container}>\r\n            {!startChatOpen ?\r\n                <Button onClick={openStartConversation} variant=\"outline-light\">Start new chat +</Button> : null}\r\n            {startChatOpen ? <CreateChat/> : <ChatList/>}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport ChatWindow from './components/chat-window/ChatWindow';\r\nimport Sidebar from './components/sidebar/Sidebar';\r\nimport styles from './Main.module.css';\r\n\r\nfunction Main() {\r\n    return (\r\n        <div className={styles.container}>\r\n            <Sidebar/>\r\n            <ChatWindow/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Main;","import {configureStore} from '@reduxjs/toolkit';\r\nimport {appSlice} from './AppSlice';\r\n\r\nexport const store = configureStore({\r\n    reducer: {\r\n        app: appSlice.reducer,\r\n    },\r\n\r\n\r\n    // This only concerns Chrome extension: Redux dev tool:\r\n    // https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd\r\n    devTools: {\r\n        trace: true,\r\n    }\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the redux load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web redux is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: {'Service-Worker': 'script'},\r\n    })\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different redux. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then(registration => {\r\n                registration.unregister();\r\n            })\r\n            .catch(error => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Main from './Main';\r\nimport {store} from './redux/store';\r\nimport {Provider} from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <Main/>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your redux to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}